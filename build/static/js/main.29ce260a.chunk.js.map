{"version":3,"sources":["services/quiz_service.ts","services/FirebaseService.js","components/Question.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["Choice","shuffleArray","array","sort","Math","random","getQuizdata","numQues","a","fetch","res","json","results","quiz","map","questionObj","index","question","answer","correct_answer","option","incorrect_answers","concat","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","messaging","useStyles","makeStyles","theme","main_div","width","margin","paper","padding","spacing","Question","callback","currentQuestion","classes","useState","userSelect","setUserSelect","handleState","e","target","value","Fragment","className","Paper","elevation","onSubmit","eachOption","type","name","required","checked","onChange","App","setQuiz","setCurrentQuestion","increment","setIncrement","result","setResult","useEffect","EASY","questions","console","log","Notification","requestPermission","then","permission","getToken","currentToken","catch","error","fetchData","style","textAlign","length","fontFamily","textShadow","color","preventDefault","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.29ce260a.chunk.js","sourcesContent":["import { Quiz, QuestionType } from '../types/type';\r\nexport enum Choice {\r\n    EASY = \"easy\",\r\n    MEDIUM = \"MEDIUM\",\r\n    HARD = \"hard\"\r\n}\r\n\r\nconst shuffleArray = (array: any[]) => {\r\n    return [...array].sort(() => Math.random() - 0.5)\r\n}\r\n\r\nexport default async function getQuizdata(numQues: number, Choice: Choice) {\r\n    let res = await fetch(`https://opentdb.com/api.php?amount=${numQues}&difficulty=${Choice}&type=multiple`);\r\n    let { results } = await res?.json();\r\n    let quiz: Quiz[] = results?.map((questionObj: QuestionType, index: number) => {\r\n        return {\r\n            question: questionObj?.question,\r\n            answer: questionObj?.correct_answer,\r\n            option: shuffleArray(questionObj?.incorrect_answers.concat(questionObj?.correct_answer)),\r\n        }\r\n    })\r\n    return quiz;\r\n\r\n}","import firebase from \"firebase\";\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyBd4JbD9gt73_5ZSBsnjJ7Y1ezTuj6RM4U\",\r\n    authDomain: \"quiz-pwa-proj.firebaseapp.com\",\r\n    projectId: \"quiz-pwa-proj\",\r\n    storageBucket: \"quiz-pwa-proj.appspot.com\",\r\n    messagingSenderId: \"463032096707\",\r\n    appId: \"1:463032096707:web:884bd4d8f6fd25df090f76\",\r\n    measurementId: \"G-PS6XD094V7\"\r\n};\r\nfirebase.initializeApp(firebaseConfig);\r\nvar messaging = firebase.messaging();\r\n\r\nexport function InitNotification() {\r\n    Notification.requestPermission().then((permission) => {\r\n        console.log('Permission :', permission);\r\n        if (permission === 'granted') {\r\n            messaging.getToken().then((currentToken) => {\r\n                if (currentToken) {\r\n                    console.log('Token Coming :', currentToken);\r\n                }\r\n                else {\r\n                    console.log(\"No registration token available. Request permission to generate one.\");\r\n                }\r\n            }).catch((error) => {\r\n                console.log('An error occurred while retrieving token. ', error);\r\n            })\r\n        }\r\n    })\r\n\r\n}\r\n","import React, { useState } from 'react';\r\nimport { propType } from './../types/type';\r\nimport { makeStyles, Paper } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    main_div: {\r\n        width: '50%',\r\n        margin: '0 auto'\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(3)\r\n    }\r\n}))\r\n\r\nconst Question: React.FC<propType> = ({ question, option, callback, currentQuestion }) => {\r\n    const classes = useStyles();\r\n    const [userSelect, setUserSelect] = useState(\"\");\r\n\r\n    const handleState = (e: any) => {\r\n        setUserSelect(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className={classes.main_div}>\r\n                <Paper elevation={3} className={classes.paper}>\r\n                    <div>\r\n                        Question  {currentQuestion}: {question}\r\n                    </div>\r\n                    <br />\r\n                    <div>\r\n                        <form onSubmit={(e: React.FormEvent<EventTarget>) => callback(e, userSelect)}>\r\n                            {option?.map((eachOption: string, index: number) => {\r\n                                return (\r\n                                    <React.Fragment key={index}>\r\n                                        <div>\r\n                                            <label>\r\n                                                <input type=\"radio\" name=\"option\" value={eachOption} required checked={userSelect === eachOption} onChange={handleState} />\r\n                                                {eachOption}\r\n                                            </label>\r\n                                        </div>\r\n                                    </React.Fragment>\r\n                                )\r\n                            })}\r\n                            <br />\r\n                            <input type=\"submit\" />\r\n                        </form>\r\n                    </div>\r\n                </Paper>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Question;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport getQuizdata from './services/quiz_service';\nimport { Quiz } from './types/type';\nimport { InitNotification } from './services/FirebaseService';\nimport Question from './components/Question';\nimport { Choice } from './services/quiz_service';\n\nfunction App() {\n\n  const [quiz, setQuiz] = useState<Quiz[]>([]);\n  let [currentQuestion, setCurrentQuestion] = useState(1);\n  let [increment, setIncrement] = useState(0);\n  let [result, setResult] = useState(false);\n\n  useEffect(() => {\n    InitNotification();\n    async function fetchData() {\n      const questions: Quiz[] = await getQuizdata(6, Choice.EASY);\n      console.log(\"Which\", questions);\n      setQuiz(questions);\n    }\n    fetchData();\n  }, [])\n\n  // console.log(\"How its work\", quiz[currentQuestion].answer);\n\n  const handleSubmit = (e: React.FormEvent<EventTarget>, userSelect: string) => {\n    e.preventDefault();\n    if (userSelect === quiz[currentQuestion]?.answer) {\n      setIncrement(++increment);\n    }\n    if (currentQuestion !== quiz?.length - 1) {\n      setCurrentQuestion(++currentQuestion);\n    }\n    else {\n      setResult(true)\n    }\n  }\n  if (result) {\n    return (\n      <React.Fragment>\n        <div style={{ textAlign: 'center' }}>\n          <h1>Correct Answer : {increment}</h1>\n          Total Answer : {quiz?.length - 1}\n        </div>\n      </React.Fragment>\n    )\n  }\n  return (\n    <React.Fragment>\n      <div className=\"App\">\n        <h1 style={{ textAlign: 'center', fontFamily: 'serif', textShadow: ' 2px 2px 4px #000000', color: 'white' }}>Quiz App</h1>\n\n        <Question\n          question={quiz[currentQuestion]?.question}\n          option={quiz[currentQuestion]?.option}\n          callback={handleSubmit}\n          currentQuestion={currentQuestion}\n        />\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://cra.link/PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://cra.link/PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}